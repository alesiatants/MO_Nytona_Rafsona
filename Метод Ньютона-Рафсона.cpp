// Метод Ньютона-Рафсона.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <cmath>
using namespace std;
//Целевая функция
double f(double x1, double x2){
    return pow(x1, 2) + 2 * pow(x2, 2) - 3 * x1 + 5 * x2 + 1;
}

int main()
{
    setlocale(LC_ALL, "Russian");
    double x1, x2, k = 0, m = 0, c1, c2, gradientf = 1, eps;
   //расчет элементов матрицы Гессе
    double a11 = 2, a12 = 0.00001, a21 =0.00001, a22 = 4;
    double b11, b12, b21, b22, p1, p2;
    cout << "Введите точность eps = "; cin >> eps;
    cout << "Введите координаты начальной точки: \n";
    cout << "x1 = "; cin >> x1; 
    cout << "x2 = "; cin >> x2;
    
    double Gasse, h;
    
    while (gradientf > eps) {
        //расчет элементов вектора градиента
        c1 = 2 * x1 - 3;
        c2 = 4 * x2 + 5;
        //расчет градиента функции
        gradientf = sqrt(c1 * c1 + c2 * c2);
        //Проверка логической функции СИЛЬВЕСТР (формальные параметры)
        if ((a11 > 0) && ((a11 * a22 - a12 * a12) > 0)) {
            k++;
            //рачет определителя матрицы Гессе
            Gasse = a11 * a22 - a12 * a12;
            //Расчет эдементов обратной матрицы Гессе
            b11 = a22 / Gasse;
            b12 = -a21 / Gasse;
            b21 = -a12 / Gasse;
            b22 = a11 / Gasse;
            //расчет напрвления спуска
            p1 = b11 * c1 + b12 * c2;
            p2 = b21 * c1 + b22 * c2;
            //расчет величины шага в ветви по методу Ньютона-Рафсона
            h = (c1 * p1 + c2 * p2) / (a11 * p1 * p1 + 2 * a12 * p1 * p2 + a22 * p2 * p2);

        }
        else {
            m++;
            p1 = c1;
            p2 = c2;
            //расчет величины шага в ветви по методу наискорейшего спуска
            h = (c1 * c1 + c2 * c2) / (a11 * c1 * c1 + 2 * a12 * c1 * c2 + a22 * c2 * c2);
        }
        x1 = x1 - h * p1;
        x2 = x2 - h * p2;
    }
    cout << "Результаты оптимизации: \n";
    cout << "x* = (" << x1 <<", "<<x2 << ");\n";
    cout << "f(x*) = " << f(x1, x2)<< "\n";
    cout << "Число итераций k = " << k << ", число итераций m = " << m;
  

    
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
